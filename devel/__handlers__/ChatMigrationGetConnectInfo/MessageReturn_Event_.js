/*
 * Auto-generated by Frida. Please modify to match the signature of -[ChatMigrationGetConnectInfo MessageReturn:Event:].
 * This stub is currently auto-generated from manpages when available.
 *
 * For full API reference, see: https://frida.re/docs/javascript-api/
 */

{
  /**
   * Called synchronously when about to call -[ChatMigrationGetConnectInfo MessageReturn:Event:].
   *
   * @this {object} - Object allowing you to store state for use in onLeave.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {array} args - Function arguments represented as an array of NativePointer objects.
   * For example use args[0].readUtf8String() if the first argument is a pointer to a C string encoded as UTF-8.
   * It is also possible to modify arguments by assigning a NativePointer object to an element of this array.
   * @param {object} state - Object allowing you to keep state across function calls.
   * Only one JavaScript function will execute at a time, so do not worry about race-conditions.
   * However, do not use this to store function arguments across onEnter/onLeave, but instead
   * use "this" which is an object for keeping state local to an invocation.
   */
  onEnter(log, args, state) {
    log(`-[ChatMigrationGetConnectInfo MessageReturn:${args[2]} Event:${args[3]}]`);
    const arg2 = new ObjC.Object(args[2]);  // ProtobufCGIWrap

    const request = new ObjC.Object(arg2.$ivars['m_pbRequest']);
    show_fields(request, 'request', log);
    const baseRequest = new ObjC.Object(request.baseRequest());
    show_fields(baseRequest, 'request.baseRequest', log);
    log(`sessionKey=${baseRequest.sessionKey()}, uin=${baseRequest.uin()}, deviceId=${baseRequest.deviceId()}, clientVersion=${baseRequest.clientVersion()}, deviceType=${baseRequest.deviceType()}, scene=${baseRequest.scene()}`)

    const response = new ObjC.Object(arg2.$ivars['m_pbResponse']);
    show_fields(response, 'response', log);
    const baseResponse = new ObjC.Object(response.baseResponse());
    show_fields(baseResponse, 'response.baseResponse', log);
    const key = new ObjC.Object(response.key());
    log(hexdump(key.buffer(), {length: key.iLen() * 2}));
  },

  /**
   * Called synchronously when about to return from -[ChatMigrationGetConnectInfo MessageReturn:Event:].
   *
   * See onEnter for details.
   *
   * @this {object} - Object allowing you to access state stored in onEnter.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {NativePointer} retval - Return value represented as a NativePointer object.
   * @param {object} state - Object allowing you to keep state across function calls.
   */
  onLeave(log, retval, state) {
  }
}
