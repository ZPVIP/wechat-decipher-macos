/*
 * Auto-generated by Frida. Please modify to match the signature of -[WXGBackupDataMgr getBackupDataPushFromBakChatMsgList:withDataID:].
 * This stub is currently auto-generated from manpages when available.
 *
 * For full API reference, see: https://frida.re/docs/javascript-api/
 */

{
    /**
     * Called synchronously when about to call -[WXGBackupDataMgr getBackupDataPushFromBakChatMsgList:withDataID:].
     *
     * @this {object} - Object allowing you to store state for use in onLeave.
     * @param {function} log - Call this function with a string to be presented to the user.
     * @param {array} args - Function arguments represented as an array of NativePointer objects.
     * For example use args[0].readUtf8String() if the first argument is a pointer to a C string encoded as UTF-8.
     * It is also possible to modify arguments by assigning a NativePointer object to an element of this array.
     * @param {object} state - Object allowing you to keep state across function calls.
     * Only one JavaScript function will execute at a time, so do not worry about race-conditions.
     * However, do not use this to store function arguments across onEnter/onLeave, but instead
     * use "this" which is an object for keeping state local to an invocation.
     */
    onEnter(log, args, state) {
        log(`-> -[WXGBackupDataMgr getBackupDataPushFromBakChatMsgList:withDataID:]`);
        const arg3 = new ObjC.Object(args[3]);          // __NSCFString
        log(`dataID = ${arg3.UTF8String()}`);

        const arg2 = new ObjC.Object(args[2]);          // BakChatMsgList
        show_fields(arg2, 'arg2', log);

        const list = new ObjC.Object(arg2.list());  // NSMutableArray
        for (let i = 0; i < list.count().valueOf(); i++) {
            const msgItem = list.objectAtIndex_(i);  // BakChatMsgItem
            show_fields(msgItem, `msgItem[${i}]`, log);

            if (msgItem.fromUserName()) {
                const fromUserName = new ObjC.Object(msgItem.fromUserName());
                show_fields(fromUserName, `msgItem[${i}].fromUserName`, log);
            }

            if (msgItem.toUserName()) {
                const toUserName = new ObjC.Object(msgItem.toUserName());
                show_fields(toUserName, `msgItem[${i}].toUserName`, log);
            }

            if (msgItem.content()) {
                const content = new ObjC.Object(msgItem.content());
                show_fields(content, `msgItem[${i}].content`, log);
            }

            if (msgItem.mediaId()) {
                const mediaIdArr = new ObjC.Object(msgItem.mediaId()); // NSMutableArray
                for (let j = 0; j < mediaIdArr.count(); j++) {
                    const mediaId = mediaIdArr.objectAtIndex_(j);
                    show_fields(mediaId, `msgItem[${i}].mediaId`, log);
                }
            }

            if (msgItem.mediaType()) {
                const mediaTypeArr = new ObjC.Object(msgItem.mediaType()); // NSMutableArray
                for (let j = 0; j < mediaTypeArr.count(); j++) {
                    const mediaType = mediaTypeArr.objectAtIndex_(j);
                    show_fields(mediaType, `msgItem[${i}].mediaType`, log);
                }
            }

            if (msgItem.buffer()) {
                const buffer = new ObjC.Object(msgItem.buffer());
                show_fields(buffer, `msgItem[${i}].buffer`, log);
            }

            /*
             *  In case of null fields, we can create an empty instance to
             *  extract the protobuf message definition.
             *
            const buffer = ObjC.classes.SKBuiltinBuffer_t;
            show_fields(buffer.alloc().init(), 'SKBuiltinBuffer_t', log);
            */
        }
    },

        /**
         * Called synchronously when about to return from -[WXGBackupDataMgr getBackupDataPushFromBakChatMsgList:withDataID:].
         *
         * See onEnter for details.
         *
         * @this {object} - Object allowing you to access state stored in onEnter.
         * @param {function} log - Call this function with a string to be presented to the user.
         * @param {NativePointer} retval - Return value represented as a NativePointer object.
         * @param {object} state - Object allowing you to keep state across function calls.
         */
        onLeave(log, retval, state) {
        }
}
